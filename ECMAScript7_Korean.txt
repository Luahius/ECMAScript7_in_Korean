ECMA International
Standard ECMA-262
언어 명세

해석하면 어색해질 수 밖에 없는 전문용어(예: Undefined Value)는 한국어로 번역하지 않고 그대로 사용하였음을 알립니다.

번역본
By Kai RPM

ECMAScript 2016 언어 명세
asdfasdf
목차
서문
1.범위, 영역
2.양식
3.표준관련
4.개요
4.1 웹 스크립트
4.2 ECMASciprt 개요
4.2.1 객체
4.2.2 ECMAScript의 Strict 변형
4.3 용어와 정의
4.3.1 타입
4.3.2 기본타입
4.3.3 객체
4.3.4 구조체
4.3.5 프로토타입
4.3.6 일반 object
4.3.7 Exotic object (본문 해석하다가 어울리는 단어 선택 번역)
4.3.8 표준 object
4.3.9 Built-in object(본문 해석하다가 어울리는 단어)
4.3.10 Undefined value
4.3.11 Undefined type
4.3.12 null value
4.3.13 Null type
4.3.14 Boolean value
4.3.15 Boolean type
4.3.16 Boolean object
4.3.17 String value
4.3.18 String type
4.3.19 String object
4.3.20 Number value
4.3.21 Number type
4.3.22 Number object
4.3.23 Infinity
4.3.24 
일단 목차가 중요한 게 아니니까 해석부터 합시다.


서문
이 Ecma Standard는 ECMAScript 2016 언어를 정의합니다. 또한, ECMAScript 언어 명세의 7판입니다. 1997년에 첫 판이 발행된 이후로, ECMAScript는 세계에서 가장 널리 사용된 다목적 프로그래밍 언어로 성장했습니다. 웹 브라우저에 내장된 언어로 잘 알려져 있지만 서버와 내장 프로그램으로써 널리 도입되어 왔습니다.
ECMAScript는 가장 잘 알려진 Javascript(Netscape)와 Jscript(Microsoft)에서 파생된 수많은 기술들을 기초로 합니다. 이 언어는 Netscape의 Brendan Eich와 처음으로 등장한 Navigator 2.0 브라우저에 의해 개발됐습니다. 이것은 Netscape의 모든 다음 브라우저와 Microsoft의 Internet Explorer 3.0의 시작으로 등장해왔다.

ECMAScript 언어 명세의 발전은 1996년 11월부터 시작했습니다. Ecma총회는 Ecma Standard의 첫 판을 1997년 6월에 규정했습니다.
Ecma Standard는 빠른 절차로 도입에 관해 ISO/IEC JTC 1에게 제시했으며, 1998년 4월에 국제 표준 ISO/IEC 16262에 의해 채택되었다. 1998년 6월 ECAM 총회는 ECMA-262 2판을 ISO/IEC 1626와의 제휴를 완벽히 유지하기 위해 승인했다. 첫 판과 2판의 수정은 사실상 편집되었다.
표준 3판은 사전에 미래의 언어 성장을 예상하며 강력한 정규 표현식,  더 나은 문자열 처리, 새로운 제어 명세, try/catch 예외 처리, 더 엄격한 에러 정의, 숫자출력 형식과 소수치환을 소개했다. ECMAScript 표준의 3판은 1999년 12월에 Ecma 총회에 의해 채택되고 2002 6월 ISO/IEC 16262으로 출판됐다.
3판 출판 이후, ECMAScript는 기본적으로 모든 웹 브라우저에 프로그래밍 언어를 지원하게 된 World Wide Web 연대로써 강력한 규정을 세웠다. 그 중대한 연구는 ECMAScript의 4판을 발전시켰다. 그러나, 그 연구는 ECMAScript 4판으로 완성되지도 발표되지도 않았지만 일부는 6판의 개발에 포함되었다.
ECMA-262 5판으로써 출판된 ECMAScript 5판은 브라우저 구현과 3판의 출판 이후에 떠오르던 새로운 기능을 위해 추가된 지원이 대세가 되면서 언어 명세의 설명을 사실상 체계적으로 정리했다. 그런 기능들은 accessor 프로퍼터, *reflective creation(역자주 * Reflect 의 개념이 새롭게 생성되었다.), 객체들의 검사, 프로퍼티 속성의 프로그램 제어, 추가적인 배열 조작 함수들, JSON객체 인코딩 포맷에 대한 지원 그리고 강화된 에러 검사와 프로그램 보안을 제공하는 *strict mode(역자주 * 엄격하게 Javascript의 문법을 검수하기도 한다.)를 포함한다. 5판은 2009년 12월 ECMA 총회에 의해 채택되었다.

5판은 빠른 절차로 도입에 관해 ISO/IEC JTC 1에 제출됐고 국제 표준 ISO/IEC 16262:2011으로 승인됐다. ECMAScript 표준의 5.1판은 약간의 개정판과 원래 본문을 ISO/IEC 16262:2011로써 통합됐다. 5.1판은 2011년 6월에 ECMA 총회로부터 채택됐다.

5판 간행물을 준비해오면서 2009년에 6판의 개발에 초점을 두고 착수했다. 그러나, 6판은 중요한 실험작업과 1999년에 3판의 출간물에 비롯되어 언어 개선 계획 활동들로 앞서 선행됐다. 실제로 6판의 완성은 15년간의 노력 중 최고점을 찍었다. 추가 목표는 규모가 있는 어플리케이션에 더 나은 지원을 제공과 라이브러리 제작 그리고 또 다른 언어에 대해 컴파일 대상으로써 ECMAScript의 사용 증가를 포함했다. 몇가지 주요한 개선점들은 모듈, class 선언, lexical 범위 영역, *iterator(역자주 * 반복가능한 객체)와 generator, 비동기 프로그래밍을 위한 promise, 올바른 재귀 호출을 포함시켰다. 내장 ECMAScript 라이브러리는 또 map, set, 2진수 값의 배열뿐만 아니라 또 string과 정규표현식으로 이루어진 유니코드 추가 문자 지원을 포함하는 데이터 추상화 지원하기 위해 확장됐다. 또한 내장 부분들은 확장가능한 자식class(역자주 * subclass로써 사용해야함이 옳다고 본다.)를 통해 만들어졌다. 6판은 일반적인 기본과 나아지고 있는 언어, 라이브러리의 개선을 제공한다. 6판은 2015년 6월 총회로부터 채택되었다.

ECMAScript 명세는 Ecma TC39에서 매년 새로운 발표 흐름과 개발 프로세스에 따라 발표된 ECMAScript 첫 판이다. 훨씬 더 나은 개발을 위해 기본으로 제공하기 위해서 깃허브의 일반텍스트 소스 문서는 ECMAScript 2015 소스 문서를 기초로 두었다. 이 표준 개발이 지나서 수백의 pull 요청(역자주 * 깃허브에 원격저장소의 파일을 로컬저장소로 끌어올 때 쓰이는 스크립트)과 issue(역자주 * 깃허브의 용어)들은 수 천의 버그 수정과 편집파일 그리고 다른 개선 파일들로 가득찼다. 게다가 수많은 소프트웨어 툴이 Ecmarkup, Ecmarkdown 그리고 Grammardown 작업을 돕도록 개발됐다. 또한 이 명세는 새로운 지수 연산자 지원과 includes 라 불리는 Array.prototype에 대한 새로운 메소드 추가를 포함한다.

현판과 그 이전판의 발전을 위하여 Ecma TC39 내의 각각을 대표하는 12개의 많은 기구들은 중요한 기여해왔다. 게다가 활발한 커뮤니티가 TC39의 ECMAScript를 지지하면서 나타났다. 이 커뮤니티는 수많은 설계, 정리된 수 천의 버그 제출, 동작해 본 구현 경험, 도움이 되는 테스트 케이스 그리고 ECMAScript에 대해 훈련시키는 world-wide 개발자 커뮤니티를 개설해왔다. 안타깝게도 이 노력을 기여한 모든 사람들과 기관을 밝히고 감사의 뜻을 전하는 것은 불가능하다.

Allen Wirfs-Brock
ECMA-262, 6th Edition Project Editor

Brain Terlson
ECMA-262, 7th Edition Project Editor


1. 범위

   이 표준은 범용 ECMAScript 2016 프로그래밍 언어를 정의합니다.

2. 적합성(?)

   ECMAScript의 적합성 구현(수행 가능한 기능에 적합 요구 사항을 만족하도록 구현하는 것을 말한다.)은 모든 타입과,값,객체,속성,함수와 프로그램의 구문을 본 명세서에 기재된 의미를 제공하고 지원해야합니다.
   
   ECMAScript의 적합성 구현은 유니 코드 버전 8.0.0 이상 및 ISO / IEC 10646을 기준으로 소스 텍스트를 해석합니다.
   
   ECMAScript의 적합성 구현은 애플리케이션 프로그래밍 인터페이스를 제공하고 다양한 사람의 언어 및 국가에서 사용되는 언어와 규칙을 ECMA-402의 가장 최신버전에서 이 명세서와 함께 지원합니다.

   ECMAScript의 적합성 구현은 추가유형,객체,속성,그리고 이 명세서에 기재된 것 이상으로 많은 기능을 제공 할것입니다. 특히, ECMAScript의 적합성 구현은 이 명세서에 설명되어 지지 않은 속성들도 제공할것입니다.

   ECMAScript의 적합성 구현은 이 명세서에 설명되있지 않은 프로그램과 정규 표현식을 지원할 것입니다. 특히, ECMAScript의 적합성 구현은 프로그램 구문이 "미래 예약어"로 만들어지고 미래예약어로 사용되어지는것을 이 명세서의 하위절 11.6.2.2구문에서 지원할 것 입니다.  
   
   ECMAScript의 적합성 구현은 하위 절 16.2에 기재되있는 금지된 확장을 하지 않아야합니다. 

3.표준 참고사항

다음의 참고 문서들은 이 문서의 활용을 위해 필수적입니다.날짜가 적힌 참조사항들은 간행물을 인용하여 적용하였습니다.날짜가 적히지 않은 참조사항들은
참조사항의 최근 간행물을 적용하였습니다.

유니코드는 추가로 1:2005, 2:2006, 3:2008 , 4:2008 를 개정했습니다.또, 정오표와 후임(?)을 추가적으로 개정하였습니다.

ECMA-402,ECMAScript 2015 국제화된 API 기준.
http://www.ecma-international.org/publications/standards/Ecma-402.htm

ECMA-404, 제이슨. 데이터 교환 방식
http://www.ecma-international.org/publications/standards/Ecma-404.htm

4.개요

이 부분은 ECMAScript 언어의 규정되지 않은 개요를 포함합니다.

ECMAScript는 객체지향 프로그래밍 언어이며 컴퓨터의 실행과 계산을 위한 처리 목적 호스트 환경입니다.
ECMAScript는 이곳에 의도 되어지지 않은 계산에 관련한 자급자족을 이 설명서에 기재되지 않은 외부의 데이터 또는 컴퓨터의 출력 결과를 정의합니다.
하지만, 그것은 ECMAScript 프로그램의 컴퓨터 환경이 하나의 목적이 아닌 다른 편리한 설명을 위해 이 설명서에서 제공할 것입니다. 
그러나 복수의 특유한 환경에서 설명과 행동을 제외하고 이 설명서의 범위 뿐만 아니라 이 사양에서 설명하는 다른 관리도구를 제공할 것입니다. 
특정한 값을 그들은 접근할 수 있고 ECMAScript 프로그램으로 부터 호출을 제공할 것입니다. 

4.1 웹 *스크립팅(역자 주 * 스크립트 언어이기도 하며 스크립트란 사전에 등록된 일련의 작업 순서이다.)

웹 브라우저는 예를 들어 윈도우, 메뉴, 팝업, 대화박스, 텍스트 영역, anchors(a element), 틀, 쿠키, 인풋과 아웃풋을 나타내는 오브젝트를 포함하는 클라이언트 단 컴퓨터의 사용을 위한 ECMAScript 호스트 환경을 제공합니다. 게다가, 호스트 환경은 포커스, 페이지, 이미지 로딩, 업로딩, 에러와 실행중단, 셀렉션, 폼 제출 그리고 마우스 액션과 같은 이벤트를 위한 스크립트 코드를 첨부하여 방법을 제공합니다. 스크립팅 코드는 HTML 그리고 사용자 인터페이스 *elements(역자주 * tag가 html5로 넘어오면서 element로 변경)의 조합과 고정되고 계산된 텍스트와 이미지들이 표시된 페이지 안에 나타난다. 그 스크립팅 코드는 사용자 상호 작용에 대해 반응이 빠르며 메인 프로그램에 대한 필요성이 없다.

웹 서버는 요청, 클라이언트, 파일 그리고 그 파일의 잠김 데이터와 공유 데이터 메커니즘을 나타내는 오브젝트를 포함하는 서버단 계산을 위한 다른 호스트 환경을 제공한다. 브라우저 단과 서버단 스크립팅가 함께 함으로써 웹 기반 어플리케이션에 대해 커스터마이즈된 유저 인터페이스를 제공하는 동안 클라이언트와 서버 사이의 사용을 분배하는 것이 가능하다.

ECMAScript를 제공하는 각각의 웹 브라우저와 서버는 고유한 호스트 환경,  모든 부분을 포함한 ECMASciprt 실행 환경을 공급한다.