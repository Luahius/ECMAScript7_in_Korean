ECMA International
Standard ECMA-262
언어 명세

해석하면 어색해질 수 밖에 없는 전문용어(예: Undefined Value)는 한국어로 번역하지 않고 그대로 사용하였음을 알립니다.

번역본
By Kai RPM

ECMAScript 2016 언어 명세
asdfasdf
목차
서문
1.범위, 영역
2.양식
3.표준관련
4.개요
4.1 웹 스크립트
4.2 ECMASciprt 개요
4.2.1 객체
4.2.2 ECMAScript의 Strict 변형
4.3 용어와 정의
4.3.1 타입
4.3.2 기본타입
4.3.3 객체
4.3.4 구조체
4.3.5 프로토타입
4.3.6 일반 object
4.3.7 Exotic object (본문 해석하다가 어울리는 단어 선택 번역)
4.3.8 표준 object
4.3.9 내장 오브젝트(본문 해석하다가 어울리는 단어)
4.3.10 Undefined value
4.3.11 Undefined type
4.3.12 null value
4.3.13 Null type
4.3.14 Boolean value
4.3.15 Boolean type
4.3.16 Boolean object
4.3.17 String value
4.3.18 String type
4.3.19 String object
4.3.20 Number value
4.3.21 Number type
4.3.22 Number object
4.3.23 Infinity
4.3.24 
일단 목차가 중요한 게 아니니까 해석부터 합시다.


서문
이 Ecma Standard는 ECMAScript 2016 언어를 정의합니다. 또한, ECMAScript 언어 명세의 7판입니다. 1997년에 첫 판이 발행된 이후로, ECMAScript는 세계에서 가장 널리 사용된 다목적 프로그래밍 언어로 성장했습니다. 웹 브라우저에 내장된 언어로 잘 알려져 있지만 서버와 내장 프로그램으로써 널리 도입되어 왔습니다.
ECMAScript는 가장 잘 알려진 Javascript(Netscape)와 Jscript(Microsoft)에서 파생된 수많은 기술들을 기초로 합니다. 이 언어는 Netscape의 Brendan Eich와 처음으로 등장한 Navigator 2.0 브라우저에 의해 개발됐습니다. 이것은 Netscape의 모든 다음 브라우저와 Microsoft의 Internet Explorer 3.0의 시작으로 등장해왔다.

ECMAScript 언어 명세의 발전은 1996년 11월부터 시작했습니다. Ecma총회는 Ecma Standard의 첫 판을 1997년 6월에 규정했습니다.
Ecma Standard는 빠른 절차로 도입에 관해 ISO/IEC JTC 1에게 제시했으며, 1998년 4월에 국제 표준 ISO/IEC 16262에 의해 채택되었다. 1998년 6월 ECAM 총회는 ECMA-262 2판을 ISO/IEC 1626와의 제휴를 완벽히 유지하기 위해 승인했다. 첫 판과 2판의 수정은 사실상 편집되었다.
표준 3판은 사전에 미래의 언어 성장을 예상하며 강력한 정규 표현식,  더 나은 문자열 처리, 새로운 제어 명세, try/catch 예외 처리, 더 엄격한 에러 정의, 숫자출력 형식과 소수치환을 소개했다. ECMAScript 표준의 3판은 1999년 12월에 Ecma 총회에 의해 채택되고 2002 6월 ISO/IEC 16262으로 출판됐다.
3판 출판 이후, ECMAScript는 기본적으로 모든 웹 브라우저에 프로그래밍 언어를 지원하게 된 World Wide Web 연대로써 강력한 규정을 세웠다. 그 중대한 연구는 ECMAScript의 4판을 발전시켰다. 그러나, 그 연구는 ECMAScript 4판으로 완성되지도 발표되지도 않았지만 일부는 6판의 개발에 포함되었다.
ECMA-262 5판으로써 출판된 ECMAScript 5판은 브라우저 구현과 3판의 출판 이후에 떠오르던 새로운 기능을 위해 추가된 지원이 대세가 되면서 언어 명세의 설명을 사실상 체계적으로 정리했다. 그런 기능들은 accessor 프로퍼터, *reflective creation(역자주 * Reflect 의 개념이 새롭게 생성되었다.), 객체들의 검사, 프로퍼티 속성의 프로그램 제어, 추가적인 배열 조작 함수들, JSON객체 인코딩 포맷에 대한 지원 그리고 강화된 에러 검사와 프로그램 보안을 제공하는 *strict mode(역자주 * 엄격하게 Javascript의 문법을 검수하기도 한다.)를 포함한다. 5판은 2009년 12월 ECMA 총회에 의해 채택되었다.

5판은 빠른 절차로 도입에 관해 ISO/IEC JTC 1에 제출됐고 국제 표준 ISO/IEC 16262:2011으로 승인됐다. ECMAScript 표준의 5.1판은 약간의 개정판과 원래 본문을 ISO/IEC 16262:2011로써 통합됐다. 5.1판은 2011년 6월에 ECMA 총회로부터 채택됐다.

5판 간행물을 준비해오면서 2009년에 6판의 개발에 초점을 두고 착수했다. 그러나, 6판은 중요한 실험작업과 1999년에 3판의 출간물에 비롯되어 언어 개선 계획 활동들로 앞서 선행됐다. 실제로 6판의 완성은 15년간의 노력 중 최고점을 찍었다. 추가 목표는 규모가 있는 어플리케이션에 더 나은 지원을 제공과 라이브러리 제작 그리고 또 다른 언어에 대해 컴파일 대상으로써 ECMAScript의 사용 증가를 포함했다. 몇가지 주요한 개선점들은 모듈, class 선언, lexical 범위 영역, *iterator(역자주 * 반복가능한 객체)와 generator, 비동기 프로그래밍을 위한 promise, 올바른 재귀 호출을 포함시켰다. 내장 ECMAScript 라이브러리는 또 map, set, 2진수 값의 배열뿐만 아니라 또 string과 정규표현식으로 이루어진 유니코드 추가 문자 지원을 포함하는 데이터 추상화 지원하기 위해 확장됐다. 또한 내장 부분들은 확장가능한 자식class(역자주 * subclass로써 사용해야함이 옳다고 본다.)를 통해 만들어졌다. 6판은 일반적인 기본과 나아지고 있는 언어, 라이브러리의 개선을 제공한다. 6판은 2015년 6월 총회로부터 채택되었다.

ECMAScript 명세는 Ecma TC39에서 매년 새로운 발표 흐름과 개발 프로세스에 따라 발표된 ECMAScript 첫 판이다. 훨씬 더 나은 개발을 위해 기본으로 제공하기 위해서 깃허브의 일반텍스트 소스 문서는 ECMAScript 2015 소스 문서를 기초로 두었다. 이 표준 개발이 지나서 수백의 pull 요청(역자주 * 깃허브에 원격저장소의 파일을 로컬저장소로 끌어올 때 쓰이는 스크립트)과 issue(역자주 * 깃허브의 용어)들은 수 천의 버그 수정과 편집파일 그리고 다른 개선 파일들로 가득찼다. 게다가 수많은 소프트웨어 툴이 Ecmarkup, Ecmarkdown 그리고 Grammardown 작업을 돕도록 개발됐다. 또한 이 명세는 새로운 지수 연산자 지원과 includes 라 불리는 Array.prototype에 대한 새로운 메소드 추가를 포함한다.

현판과 그 이전판의 발전을 위하여 Ecma TC39 내의 각각을 대표하는 12개의 많은 기구들은 중요한 기여해왔다. 게다가 활발한 커뮤니티가 TC39의 ECMAScript를 지지하면서 나타났다. 이 커뮤니티는 수많은 설계, 정리된 수 천의 버그 제출, 동작해 본 구현 경험, 도움이 되는 테스트 케이스 그리고 ECMAScript에 대해 훈련시키는 world-wide 개발자 커뮤니티를 개설해왔다. 안타깝게도 이 노력을 기여한 모든 사람들과 기관을 밝히고 감사의 뜻을 전하는 것은 불가능하다.

Allen Wirfs-Brock
ECMA-262, 6th Edition Project Editor

Brain Terlson
ECMA-262, 7th Edition Project Editor


1. 범위

   이 표준은 범용 ECMAScript 2016 프로그래밍 언어를 정의합니다.

2. 적합성(?)

   ECMAScript의 적합성 구현(수행 가능한 기능에 적합 요구 사항을 만족하도록 구현하는 것을 말한다.)은 모든 타입과,값,객체,속성,함수와 프로그램의 구문을 본 명세서에 기재된 의미를 제공하고 지원해야합니다.
   
   ECMAScript의 적합성 구현은 유니 코드 버전 8.0.0 이상 및 ISO / IEC 10646을 기준으로 소스 텍스트를 해석합니다.
   
   ECMAScript의 적합성 구현은 애플리케이션 프로그래밍 인터페이스를 제공하고 다양한 사람의 언어 및 국가에서 사용되는 언어와 규칙을 ECMA-402의 가장 최신버전에서 이 명세서와 함께 지원합니다.

   ECMAScript의 적합성 구현은 추가유형,객체,속성,그리고 이 명세서에 기재된 것 이상으로 많은 기능을 제공 할것입니다. 특히, ECMAScript의 적합성 구현은 이 명세서에 설명되어 지지 않은 속성들도 제공할것입니다.

   ECMAScript의 적합성 구현은 이 명세서에 설명되있지 않은 프로그램과 정규 표현식을 지원할 것입니다. 특히, ECMAScript의 적합성 구현은 프로그램 구문이 "미래 예약어"로 만들어지고 미래예약어로 사용되어지는것을 이 명세서의 하위절 11.6.2.2구문에서 지원할 것 입니다.  
   
   ECMAScript의 적합성 구현은 하위 절 16.2에 기재되있는 금지된 확장을 하지 않아야합니다. 

3.표준 참고사항

다음의 참고 문서들은 이 문서의 활용을 위해 필수적입니다.날짜가 적힌 참조사항들은 간행물을 인용하여 적용하였습니다.날짜가 적히지 않은 참조사항들은
참조사항의 최근 간행물을 적용하였습니다.

유니코드는 추가로 1:2005, 2:2006, 3:2008 , 4:2008 를 개정했습니다.또, 정오표와 후임(?)을 추가적으로 개정하였습니다.

ECMA-402,ECMAScript 2015 국제화된 API 기준.
http://www.ecma-international.org/publications/standards/Ecma-402.htm

ECMA-404, 제이슨. 데이터 교환 방식
http://www.ecma-international.org/publications/standards/Ecma-404.htm

4.개요

이 부분은 ECMAScript 언어의 규정되지 않은 개요를 포함합니다.

ECMAScript는 객체지향 프로그래밍 언어이며 컴퓨터의 실행과 계산을 위한 처리 목적 호스트 환경입니다.
ECMAScript는 이곳에 의도 되어지지 않은 계산에 관련한 자급자족을 이 설명서에 기재되지 않은 외부의 데이터 또는 컴퓨터의 출력 결과를 정의합니다.
하지만, 그것은 ECMAScript 프로그램의 컴퓨터 환경이 하나의 목적이 아닌 다른 편리한 설명을 위해 이 설명서에서 제공할 것입니다. 
그러나 복수의 특유한 환경에서 설명과 행동을 제외하고 이 설명서의 범위 뿐만 아니라 이 사양에서 설명하는 다른 관리도구를 제공할 것입니다. 
특정한 값을 그들은 접근할 수 있고 ECMAScript 프로그램으로 부터 호출을 제공할 것입니다. 

4.1 웹 *스크립팅(역자 주 * 스크립트 언어이기도 하며 스크립트란 사전에 등록된 일련의 작업 순서이다.)

웹 브라우저는 예를 들어 윈도우, 메뉴, 팝업, 대화박스, 텍스트 영역, anchors(a element), 틀, 쿠키, 인풋과 아웃풋을 나타내는 오브젝트를 포함하는 클라이언트 단 컴퓨터의 사용을 위한 ECMAScript 호스트 환경을 제공합니다. 게다가, 호스트 환경은 포커스, 페이지, 이미지 로딩, 업로딩, 에러와 실행중단, 셀렉션, 폼 제출 그리고 마우스 액션과 같은 이벤트를 위한 스크립트 코드를 첨부하여 방법을 제공합니다. 스크립팅 코드는 HTML 그리고 사용자 인터페이스 *elements(역자주 * tag가 html5로 넘어오면서 element로 변경)의 조합과 고정되고 계산된 텍스트와 이미지들이 표시된 페이지 안에 나타납니다. 그 스크립팅 코드는 사용자 상호 작용에 대해 반응이 빠르며 메인 프로그램에 대한 필요성이 없습니다.

웹 서버는 요청, 클라이언트, 파일 그리고 그 파일의 잠김 데이터와 공유 데이터 메커니즘을 나타내는 오브젝트를 포함하는 서버단 계산을 위한 다른 호스트 환경을 제공합니다. 브라우저 단과 서버단 스크립팅가 함께 함으로써 웹 기반 어플리케이션에 대해 커스터마이즈된 유저 인터페이스를 제공하는 동안 클라이언트와 서버 사이의 사용을 분배하는 것이 가능합니다.

ECMAScript를 제공하는 각각의 웹 브라우저와 서버는 고유한 호스트 환경,  모든 부분을 포함한 ECMASciprt 실행 환경을 공급합니다.

4.2 ECMAScript 개요

다음은 ECMAScript(언어의 모든 부분이 설명된 것은 아닙니다.) 비공식 개요입니다. 이 개요는 올바른 표준은 아닙니다.

ECMAScript는 객체기반입니다. 기본적인 언어와 호스트 편리함은 오브젝트에 의해 제공되며 ECMAScript 프로그램은 소통하는 오브젝트의 집단입니다. ECMAScript에서 오브젝트는 없거나 많은 프로퍼티들이 어떻게 각 프로퍼티가 사용되어지는지 결정하는 속성 컬렉션입니다. 예를 들어,  하나의 프로퍼티에 대한 쓰기가능 속성이 false 로 설정될 때, 프로퍼티에 다른 값이 할당된 ECMAScript 코드가 실행됨으로써 어떠한 실행은 실패합니다. 프로퍼티는 다른 오브젝트, 기본 타입들 혹은 함수들을 가지고 있는 컨테이너입니다. 기본 타입은 다음의 내장타입의 하나의 멤버입니다 : Undefined, Null, Boolean, Number, String 그리고 Symbol; 하나의 오브젝트는 내장타입 *Object(역자 주 * object는 생성자 함수과 같은 생성된 오브젝트를 말하며 Object는 가장 상위 레벨에 있는 Object class이다)의 하나의 멤버입니다; 그리고 함수는 호출가능한 오브젝트입니다. 프로퍼티를 통한 오브젝터와 관련된 함수를 메소드라고 부릅니다.

ECMAScript는 ECMAScript 엔티티의 정의를 완성한 내장오브젝터 컬렉션을 정의합니다. 이 내장오브젝트는 global 오브젝트를 포함합니다; 내장오브젝트의 종류는 Object, Boolean, Symbol 그리고 다양한 Error 오브젝트와 같은 언어의 런타임 시멘틱에 대한 기본적인 오브젝트; Math, Number 그리고 Date와 같은 숫자 값을 나타내고 다루는 오브젝트; 텍스트 처리 오브젝트 String 그리고 RegExp(정규표현식); Array 그리고 특정한 숫자 데이터 표현을 모두 가지는 요소인 Typed Arrays의 각기 다른 종류와 같은 값들의 컬렉션을 index 형태로 가지는 오브젝트; Map과 Set와 같은 식별 부호들을 가진 컬렉션 오브젝트; JSON 오브젝트, ArrayBuffer 그리고 DataView와 같은 구조화된 데이터를 지원하는 오브젝트; generator 함수와 Promise 오브젝트 같은 제어 추상화를 지원하는 오브젝트; 그리고, Proxy와 Reflect 같은 reflection 오브젝트입니다.

또한 ECMAScript는 내장 연산자의 세트를 정의합니다. ECMAScript 연산자는 다양한 단항 연산들, 증감 연산자, 연결 연산자, 비트 쉬프트 연산자, 관계 연산자, 동등 연산자, 이진 비트 연산자, 이진 논리 연산자, 할당 연산자 그리고 콤마 연산자들을 포함합니다.

규모가 큰 ECMAScript 프로그램은 표현들 그리고 선언문의 다양한 시퀀스로 프로그램을 분할 할 수 있도록 모듈들을 지원합니다. 각 모듈은 명시적으로 다른 모듈과 다른 모듈을 사용할 수 있는 선언문과 같은 것에 의하여 제공되는 요구를 다루는 선언문을 식별합니다.

ECMAScript syntax는 의도적으로 Java syntax와 비슷합니다. ECMAScript syntax는 사용하기 편한 스크립트 언어를 제공할 수 있도록 완화되었습니다. 예를 들어, 변수는 type 선언이나 type에 프로퍼티를 연동할 필요가 없고 또한 정의된 함수도 원래대로 호출하는 선언문을 가질 필요도 없습니다.

4.2.1 Objects
ECMAScript가 class 정의에 대한 syntax 를 포함한다 할지라도, ECMAScript 오브젝트는 기본적으로 C++, Smalltalk 혹은 자바 같은 class 기반이 아닙니다. 대신에 오브젝트는 literal 표기법을 통하거나 오브젝트를 생성하고 프로퍼티에 초기값 할당을 위하여 모든 부분을 초기화하는 코드를 실행하는 생성자들을 통해서 다양한 방법으로 생성될 것입니다. 각각의 생성자는 프로토타입 기반 상속 그리고 공유된 프로퍼티를 구현하기 위해 사용되는 "프로토타입"이라 명명된 프로퍼티를 가진 함수입니다. Object는 new 표현식으로 생성자를 사용함으로써 생성됩니다; 예를 들어, new Date(2009,11) 는 new Date 오브젝트를 생성합니다. new키워드 없이 생서자를 생성하는 것은 생성자에 의존하는 결과물을 가집니다. 예를 들어, Date()는 object보다는 현재 날짜와 시간의 문자열을 만듭니다.

모든 오브젝트는 생성자의 프로토타입 프로퍼티의 값에 대한 간접 참조를 가지는 생성자(object 의 프로토타입이라 불려집니다.)에 의해 만들어졌습니다. 게다가, 프로토타입은 프로토타입과 기타등등에 대해 널이 아닌 간접 참조를 가질 것이다; 이것은 프로토타입 chain 이라고 불립니다. 참조가 object 안에 프로퍼티로 만들어질 때, 참조는 프로퍼티 이름을 포함하는 property chain의 첫 object 에 프로퍼티의 이름입니다. 즉, 직접적으로 언급된 첫 오브젝트는 프로퍼티를 확인합니다; 그 오브젝트가 명명된 프르포터를 포함하는지, 참조가 가리키는 것이 프로퍼티인지; 그 오브젝트가 명명된 프로퍼터리를 포함하는지, 오브젝트에 대한 프로토타입이 다음에 확인되는지 등등.

일반적으로 class기반 오브젝트지향 언어의 형태는 클래스들에 의해 전달된 instance, methods와 구조와 동작뿐인 상속에 의해 전달됩니다. ECMAScript에서 형태와 메소드는 구조와 동작과 상태가 모두 상속받아지면서 오브젝트에 의해 전달됩니다.

프로토타입이 포함하는 특정한 프로퍼티를 직접적으로 가지지 않는 모든 오브젝트는 프로퍼티와 값을 공유합니다.

그림 1은 이것을 설명합니다 :

CF는 생성자(또한 object)입니다. 다섯개의 오브젝트는 new 표현식을 사용하여 만들어진 상태입니다: cf1, cf2, cf3, cf4 그리고 cf5. 각각의 오브젝트는 q1과 q2라는 프로퍼티를 포함합니다. 점선은 간접 프로토타입 관계를 나타냅니다; 그리고 예를 들어 cf3의 프로토타입은 CFp입니다. 
CF의 생성자는 CFp, cf1, cf2, cf3, cf4 또는 c5에서 볼 수 없는 두개의 P1,P2라는 프로퍼티를 가집니다. CFp안에 CFP1 프로퍼티가 cf1, cf2, cf3, cf4 그리고 cf5(CF에는 공유가 되지 않는다.)에 CFp의 q1,q2 또는 CFP1가 아닌 간접 프로토타입 chain에서 찾았던 모든 프로퍼티처럼 공유됩니다. "CF와 CFp 사이에는 점선 프로토타입 링크는 없다"에 주목하세요.

대부분의 class 기반 오브젝트 언어와 달리 프로퍼티는 값을 할당함으로써 오브젝트에 다이나믹하게 더해질 수 있습니다. 즉, 생성자들은 전체 혹은 일부의 구성된 오브젝트의 프로퍼티의 이름이나 할당 값을 필요하지 않습니다. 위의 다이어그램에서 하나는 CFp의 프로퍼티에 새로운 값을 할당함으로써 cf1,cf2,cf3,cf4 그리고 cf5에 새롭게 공유된 프로퍼티가 추가될 것입니다.

비록 ECMAScript 오브젝트가 기본적으로 class기반 언어가 아닐지라도 class와 같은 추상 기반을 생성자 함수와 프로토타입 오브젝트 그리고 메소드의 일반적인 패턴으로 정의하기에 편리합니다. ECMAScript 내장 오브젝트들은 class와 같은 패턴을 따릅니다. ECMAScript 2015의 시작, ECMAScript 언어는 개발자가 간결하게 내장 오브젝트에 의해 사용되는 class같은 추상 패턴과 동일한 오브젝트를 정의하도록 허용하는 syntactic 클래스 정의를 포함합니다.

4.2.2 ECMAScript의 Strict 개정

ECMAScript 언어는 사용가능한 일부 기능의 사용을 제한하기를 바랄지도 모르는 일부 유저들의 기대를 이해합니다. 그들은 보안의 중요성과 그들이 생각하기에 실수하기 쉬운 기능에 대한 예방, 강화된 에러 확인을 갖거나 선택의 다른 이유들을 위해 시도하려고 할지 모릅니다. 그 기대를 지지하기에, ECMAScript는strict 개정판을 정의합니다. Strict 개정판은 일부 코드구문과 정규 ECMAScript의 의미적인 기능을 차단하고 일부 기능의 의미적인 부분을 수정합니다. 또한, Strict 개정판은 non-strict 모드에 의한 에러처럼 명시하지 않은 상황 속에서 발생하는 throwing 에러 예외에 의해 보고 되어져야만 하는 추가적인 에러 조건을 구체화합니다.

ECMAScript의 strict 개정은 일반적으로 strict mode 라고 부릅니다. Strict mode 선택과 strict mode 구문의 사용 그리고 ECMAScript의 의미적인 부분은 명백하게 각기 다른 ECMAScript 소스 코드 단위 레벨에서 만들어집니다. strict mode 는 구문적인 소스 코드 단위 레벨을 택하기 때문에 strict mode는 규정만을 제한합니다. Strict mode는 다양한 소스 코드 단위에 걸쳐서 무조건 실행되어야하는 ECMAScript의 의미의 어떤 측면을 제한하거나 수정하지 않습니다. 완성된 ECMAScript 프로그램은 strict mode 와 non-strict mode ECMAScript 소스 코드 단위 둘 다 구성되어질 것입니다. 이 경우에는 strict mode는 실제로 실행되는 strict mode 소스 코드 단위 안에 정의된 코드만 적용할 뿐입니다.

이 명세를 따르기 위해서는 ECMAScript 구현은 정확히 제한되지 않는 ECMAScript와 명세에서 정의된 대로 strict 개정을 시행해야만 합니다. 또한, 구현은 제한되지 않은 조합과 단일로 혼합된 프로그램 안에 strict mode 소스코드 단위를 지원해야합니다.

4.3 용어과 정의
이 문서의 목적에 관련해 다음은 용어와 정의들이 사용합니다.

4.3.1 type
이 명세의 클로져 6에 정의된 데이타 값의 묶음

4.3.2 기본형 type
clause 6에 정의된 Undefined, Null, Boolean, Number, Symbol 또는 String types의 하나의 구성원

4.3.3 오브젝트
type Object의 구성원

4.3.4 생성자
오브젝트들을 생성하고 초기화하는 함수 오브젝트

4.3.5 프로토타입
다른 오브젝트에서 공유된 프로퍼티들을 제공하는 오브젝트

주석
생성자가 하나의 오브젝트를 생성시킬 때, 그 오브젝트는 결정하는 프로퍼티 참조의 용도로 생성자의 프로토타입 프로퍼티를 간접적으로 참조합니다. 그 생성자의 프로토타입 프로퍼티는 프로그램 표현식 constructor.prototype, 공유된 오브젝트의 프로토타입에 더해진 프로퍼티, 상속을 통해서나 프로퍼티를 공유하는 모든 오브젝트들에 의해 참조될 수 있습니다. 그 대신에 하나의 새로운 오브젝트는 Object.create 내장 함수를 사용함으로서 직접적으로 지정된 프로토타입을 가지고 생성될 것입니다. 

4.3.6 일반 오브젝트
필수 내부 메소드들에 대한 기본 행위를 가지는 오브젝트는 모든 오브젝트에 의해 지원되어져야 합니다.

4.3.7 외래 오브젝트(좀 더 알아봐야함)
필수 내부 메소드의 하나 혹은 그 이상에 대한 기본 행위들을 가지지 않는 오브젝트

4.3.8 표준 오브젝트
오브젝트의 이 스펙에 의해 정의된 시맨틱

4.3.9 내장 오브젝트
오브젝트는 ECMAScript 구현에 의해 명시됐고 지원됐다.

4.3.10 undefined 값
변수에 값이 할당되지 않았을 때 사용된 기본 값

4.3.11 Undefined 타입
타입의 undefined value인 유일한 값

4.3.12 null 값
아무 오브젝틔 값의 의도적인 부재를 나타내는 기본 값

4.3.13 Null 타입
타입의 null 값인 유일한 값

4.3.14 Boolean 값
Boolean 타입의 구성원

주석 2개의 Boolean 값만이 있다. true, false

4.3.15 Boolean 타입
기본 값 true와 false로 이루어지는 타입

4.3.16 Boolean 오브젝트
표준 내장 Boolean 생성자의 인스턴스인 Object 타입의 구성원

4.3.17 문자열 값
0 또는 그 이상의 부등호가 없는 16비트 정수의 한정된 어순 순서인 기본 값

4.3.18 String type
모든 가능한 문자열 값의 집합

4.3.19 String 오브젝트
표준 내장 문자열 생성자의 인스턴스인 Object 타입의 구성원

주석
문자열 오브젝트는 new 표현식, 인수처럼 문자열 값을 공급하는 것으로 문자열 생성자를 사용함으로서 생성된다. 생성되는 오브젝트는 문자열 값인 내부 공간을 가진다. 문자열 오브젝트는 함수로써 문자열 생성자를 호출함으로서 문자열 값으로 강요될 수 있다.

5. 표기법 규약

5.1 통어와 사전적 문법

5.1.1 문맥 의존 문법 -> https://en.wikipedia.org/wiki/Context-free_grammar
    문맥 의존 문법은 많은 작품들로 구성되어 있습니다. 각각의 작품들은 nonterminal이라는 추상적 기호로 불려지고, 왼편으로 정렬됩니다.
    그리고 0이나 그 이상의 nonterminal,terminal 기호를 오른쪽으로 배치합니다. 각각 문법의 경우 terminal 기호는 지정된 알파벳으로 그려집니다.
    
    체인생산은 오른쪽으로 정렬된 0또는 그 이상의 terminal 기호 및 하나의 nonterminal 기호를 가집니다. 

    하나의 독특한 문장으로 이루어진 nonterminal로 시작해, 목표 기호로 불립니다, 이미 정해진 문맥 의존 문법은 하나의 언어로 명시됩니다.
    즉,{perhaps infinite}는 제품(nonterminal,terminal,0)이 왼쪽사이드에 정렬되어져 있을때, 터미널 기호들이 반복적으로 왼쪽에서 
    오른쪽으로 교체될수 있는 상황을 말합니다. 

5.1.2 렉시컬 그리고 정규표현식 문법
    ECMAScript를 위한 렉시컬 문법은 이 지침서의 11조에 있습니다.
    이 문법은 아래 10.1에 정의된 규칙을 준수하는 터미널 기호의 유니코드 코드를 가지고 있습니다.
    그것은 일련의 제품과,goal Symbol의 InputElementDiv,InputElementTemplateTail,또는 InputElementRegExp,InputElementRegExpOrTemplateTail등 이러한 코드의 시퀀스가 일련의 입력 요소로 변환되는 방법을 설명합니다.
    
    공백 및 주석 이외의 입력요소들은 ECMAScript의 구문문법에 대한 터미널 기호를 생성하며, 그것들을 ECMAScript 토큰이라고 합니다.
    이토큰들은 예약어,식별자,ECMAScript의 구두점(. ; : ,)입니다.(punctuators of the ECMAScript language).
    또한, 줄 종결자(line terminators) 는 토큰이 아닌것으로 간주되지만, 입력요소의 일부가 되며 자동 세미콜론 삽입 방법을 아래 11.9에서 안내합니다.
    공백과 그리고 한줄의 주석은 버려지고 통어적인 문법의 입력요소에 나타나지 않습니다.
    또한, 여러줄의 주석(이것은 한줄 이상의 문자열이 되어도 상관없이 /*...*/를 폼안에 입력합니다)이 만약 그것이 줄종결(line terminator)를 포함하고 있지 않은경우에는 똑같이 버려집니다.
    그러나 만약 여러줄의 주석이 하나이상의 줄종결자(line terminator)를 포함할경우 통어적인 문법의 입력요소인 하나의 줄 종결자로 교체가 됩니다.
    ECMAScript의 정규표현식은 아래 21.2.1에 담겨져 있습니다.
    이 문법은 SourceCharacter에 의해 정의된 코드로써 터미널 기호를 가지고 있습니다.
    그것은 일련의 제품들과, goal symbol이 근원인 패턴들과 어떻게 코드들이 정규표현 패턴으로 교체되는지 설명합니다.
  
    렉시컬 그리고 정규표현식 문법은 "::"라는 구두점으로 분류합니다. 렉시컬 문법 그리고 정규표현문법은 일부 제품을 공유합니다.

5.1.3 숫자의 문자열 문법
    
    다른 문법은 숫자값을 문자별로 교체되는데에 사용되어 집니다.
    이 문법은 숫자 리터럴과 관련이 있는 어휘 문법의 부분과 유사하며, 터미널 기호로 원본 문자를 가지게됩니다.
    이 문법은 7.1.3.1에 등장합니다.
    
    숫자 문자열 문법의 제품은 ":::"이라는 구두점으로 판별합니다.

    구문 문법.
    ECMAScript의 구문문법은 11,12,13,14,15항에 명시되어져 있습니다.
    이 문법은 ECMAScript의 token을 가지고 렉시컬 문법은 터미널 기호에 의해[5.1.2]정의됩니다.
    그것은 일련의 제품들을 정의하고 두개의 대체 목표기호인 Script와 module에서 시작하며, 그것은 토큰 시퀀스가 파싱되어져 있을 때 어떻게 ECMAScript 프로그램의 적절한 구문 독립 요소를 형성하는지 기술합니다.
    그것은 첫번째로 렉시컬 문법을 반복적으로 사용하여 입력요소의 stream을 변화시킵니다.
    이 입력요소의 stream은 구문문법의 파싱된 단일 application 입니다.
   
    입력 스트림은 만약 그 입력요소에 있는 스트림의 토큰들이 하나의 파싱된 goal terminal이거나, 남은 토큰이 없을경우에 구문적인 에러가 있을 수 있습니다.
    
    구문 문법의 제품은 하나의 ":"라는 콜론을 가지고 있을경우 구두점으로 판별됩니다. 
        
 